<div class="container">
  <div class="row">
    <div class="page-header">
      <div class="pod">
        <h3><%= @decorated_run.formatted_distance %> mile run on <%= @decorated_run.formatted_long_start_time %> <%= @decorated_run.location %></h3>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-12 col-sm-12 col-md-9">
      <div class="pod">
        <%= react_component 'Map', { }, { prerender: true } %>
      </div>
    </div>
    <div class="col-12 col-sm-12 col-md-3">
      <div class="pod">
        <table id="splits-table" class="table table-sm table-hover">
          <thead>
            <tr>
              <th>Mile</th>
              <th>Pace</th>
              <th>Elev</th>
            </tr>
          </thead>
          <tbody>
          <% @strava_run.activity.splits['standard'].each_with_index do |data, index| %>
            <tr>
              <td class="text-center"><%= index == @strava_run.activity.splits['standard'].length-1 ? @decorated_run.final_split_distance : data['split'] %></td>
              <td class="text-center"><%= format_pace(data['moving_time'], data['distance']) %></td>
              <td class="text-center"><%= data['elevation_difference'] %></td>
            </tr>
          <% end %>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col">
      <div class="pod">
        <div id="chart-runs"></div>
      </div>
    </div>
  </div>
</div>

<script>
//------------
//    MAP
//------------
mapboxgl.accessToken = 'pk.eyJ1IjoiZGFud2E1IiwiYSI6ImNpcnVkM244ajBqM2pmOW02eTA4YWUwenUifQ.FfkMklO6SMp3fAQDVcRwYQ';
var map = new mapboxgl.Map({
  container: 'map-run',
  style: 'mapbox://styles/mapbox/streets-v9',
  center: <%= @strava_run.activity.start_coordinate || @decorated_run.markers.first %>,
  zoom: 9
});

var nav = new mapboxgl.Navigation({position: 'top-left'});

map.on('load', function() {
  $.ajax({
    url: '/runs/<%= params[:id] %>.json',
    success: function(data) {
      map.fitBounds(data['bounds'], { padding: 30 });
      addRouteToMap(data['route']);
      addPointsToMap(data['points']);
      map.addControl(nav);
      map.scrollZoom.disable();
    }
  });

  function addRouteToMap(route) {
    map.addSource('route', route);
    map.addLayer({
      "id": "route",
      "type": "line",
      "source": "route",
      "layout": {
        "line-join": "round",
        "line-cap": "round"
      },
      "paint": {
        "line-color": "#FF0000",
        "line-width": 2
      }
    });
  }

  function addPointsToMap(points) {
    map.addSource("points", points);
    map.addLayer({
      "id": "points",
      "type": "symbol",
      "source": "points",
      "layout": {
        "icon-image": "{icon}",
        "text-field": "{title}",
        "text-font": ["Open Sans Semibold", "Arial Unicode MS Bold"],
        "text-offset": [0, 0.6],
        "text-anchor": "top"
      }
    });
  }
});


//------------
//   CHART
//------------
var data = <%= raw @decorated_run.chart_data.to_json %>;


var Chart = (function(window,d3) {

  var margin = { top: 20, right: 40, bottom: 40, left: 30 }, width, height;

  var svg, chartWrapper, xScale, yScale1, yScale2, xAxis, yAxis1, yAxis2, line1, line2, area, path1, path2a, path2b, maxTicks;

  // parse the date/time
  var parseTime = d3.utcParse("%Y-%m-%dT%H:%M:%S.%L%Z");

  init();

  function init() {

    // format the data
    data.forEach(function(d) {
      d.datetime = parseTime(d.datetime);
      d.heart_rate = +d.heart_rate;
      d.altitude = +d.altitude;
    });

    // initialize scales
    xScale = d3.scaleTime().domain(d3.extent(data, function(d) { return d.datetime; }));
    yScale1 = d3.scaleLinear().domain(d3.extent(data, function(d) { return d.heart_rate; }));
    yScale2 = d3.scaleLinear().domain(d3.extent(data, function(d) { return d.altitude; }));

    svg = d3.select("#chart-runs").append("svg");
    chartWrapper = svg.append('g');
    xAxis = chartWrapper.append('g').classed('axis axis--x', true);
    yAxis1 = chartWrapper.append('g').classed('axis axis--y y-axis-primary', true);
    yAxis2 = chartWrapper.append('g').classed('axis axis--y y-axis-secondary', true);
    yAxisLabel1 = chartWrapper.select('.y-axis-primary').append('text');
    yAxisLabel2 = chartWrapper.select('.y-axis-secondary').append('text');
    path2a = chartWrapper.append('path').datum(data).classed('line2', true);
    path2b = chartWrapper.append('path').datum(data).classed('area', true);
    path1 = chartWrapper.append('path').datum(data).classed('line1', true);
    // maxTicks = data.length > 20 ? 20 : data.length;

    // define the heart rate line
    line1 = d3.line()
      .x(function(d) { return xScale(d.datetime); })
      .y(function(d) { return yScale1(d.heart_rate); });

    // define the altitude line
    line2 = d3.line()
      .x(function(d) { return xScale(d.datetime); })
      .y(function(d) { return yScale2(d.altitude); });

    // render the chart
    render();
  }

  function render() {

    // get dimensions based on width of parent div
    var dw = document.getElementById("chart-runs").offsetWidth;
    updateDimensions(dw);

    // update x and y scales to new dimensions
    xScale.range([0, width]);
    yScale1.range([height, 0]);
    yScale2.range([height, 0]);

    // update svg elements to new dimensions
    svg.attr('width', width + margin.right + margin.left)
      .attr('height', height + margin.top + margin.bottom);
    chartWrapper.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

    // update x-axis
    xAxis.attr("transform", "translate(0," + height + ")")
          .call(d3.axisBottom(xScale).ticks(maxTicks, d3.timeFormat("%H:%M")))
        .selectAll("text")
          .style("text-anchor", "end")
          .attr("dx", "-.8em")
          .attr("dy", ".15em")
          .attr("transform", "rotate(-65)");

    // update primary y-axis
    yAxis1.style("stroke", "#e67e22")
          .call(d3.axisLeft(yScale1));

    // update secondary y-axis
    yAxis2.attr("transform", "translate(" + width + ",0)")
          .style("stroke", "#2980b9")
          .call(d3.axisRight(yScale2));

    // update primary y-axis label
    yAxisLabel1.attr("class", "y-axis-title1")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Heart Rate (BPM)");

    // update secondary y-axis label
    yAxisLabel2.attr("class", "y-axis-title2")
      .attr("transform", "rotate(-90)")
      .attr("y", 25)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Altitude (m)");

    // update heart rate line
    path1.attr('d', line1);

    // update altitude line
    path2a.attr('d', line2);

    // update altitude area
    area = d3.area()
      .x(function(d) { return xScale(d.datetime); })
      .y0(height)
      .y1(function(d) { return yScale2(d.altitude); });

    path2b.attr("d", area);
  }

  function updateDimensions(chartParentWidth) {
    if (chartParentWidth < 600) {
      margin.left = 30;
      margin.right = 35;
      maxTicks = 10;
    } else if (chartParentWidth < 690) {
      margin.left = 40;
      margin.right = 40;
      maxTicks = 15;
    } else {
      margin.left = 50;
      margin.right = 50;
      maxTicks = 20;
    }

    aspectRatio = chartParentWidth < 500 ? 0.55 : 0.50;
    width = chartParentWidth - margin.left - margin.right;
    height = aspectRatio * width;
  }

  return {
    render : render
  }

})(window,d3);

window.addEventListener('resize', Chart.render);

</script>
