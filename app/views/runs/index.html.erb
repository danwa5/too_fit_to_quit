<div class="page-header">
  <div class="pod">
    <h2 class="is-2">Runs</h2>
  </div>
</div>

<div class="columns is-multiline">
  <div class="column is-one-quarter">
    <div class="pod">
      <%= form_tag(runs_path, method: :get, class: 'run-search-form') do |f| %>
        <div class="form-group">
          <%= label_tag :date, nil, class: " col-xs-12 control-label" %>
          <div class="col-xs-6 col-sm-6">
            <%= text_field_tag :start_date, (params[:start_date] || Date.today - 90), { class: 'form-control', placeholder: 'From' } %>
          </div>
          <div class="col-xs-6 col-sm-6">
            <%= text_field_tag :end_date, params[:end_date], { class: 'form-control', placeholder: 'To' } %>
          </div>
        </div>
        <div class="form-group">
          <%= label_tag :distance, "Distance (miles)", class: "col-xs-12 control-label" %>
          <div class="col-xs-6 col-sm-6">
            <%= text_field_tag :distance_min, params[:distance_min], { class: 'form-control', placeholder: 'min' } %>
          </div>
          <div class="col-xs-6 col-sm-6">
            <%= text_field_tag :distance_max, params[:distance_max], { class: 'form-control', placeholder: 'max' } %>
          </div>
        </div>
        <div class="form-group">
          <%= label_tag :duration, "Duration (minutes)", class: "col-xs-12 control-label" %>
          <div class="col-xs-6 col-sm-6">
            <%= text_field_tag :duration_min, params[:duration_min], { class: 'form-control', placeholder: 'min' } %>
          </div>
          <div class="col-xs-6 col-sm-6">
            <%= text_field_tag :duration_max, params[:duration_max], { class: 'form-control', placeholder: 'max' } %>
          </div>
        </div>
        <div class="form-group">
          <%= label_tag :steps, nil, class: "col-xs-12 control-label" %>
          <div class="col-xs-6 col-sm-6">
            <%= text_field_tag :steps_min, params[:steps_min], { class: 'form-control', placeholder: 'min' } %>
          </div>
          <div class="col-xs-6 col-sm-6">
            <%= text_field_tag :steps_max, params[:steps_max], { class: 'form-control', placeholder: 'max' } %>
          </div>
        </div>
        <div class="form-group">
          <%= label_tag :location, nil, class: "control-label" %>
          <%= select_tag :location, options_from_collection_for_select(@locations, 'location', 'location', params[:location]), { include_blank: true } %>
        </div>
        <script>
          $(function() {
            $('#location').selectize({ allowEmptyOption: true, sortField: 'text' });
          });
        </script>
        <%= submit_tag 'Search', class: 'btn btn-primary search-button' %>
      <% end %>
    </div>
  </div>
  <div class="column is-three-quarters">
    <div class="pod">
      <div id="chart-monthly-breakdown" class="has-text-centered">
        <h5>Monthly Breakdown</h5>
      </div>
    </div>
  </div>
</div>

<div class="columns">
  <div class="column">
    <div class="pod">
      <div class="table-responsive">
        <table id="runs-table" class="table table-condensed table-hover">
          <thead>
            <tr>
              <th>Date</th>
              <th>Distance<br>(miles)</th>
              <th>Duration<br>(H:MM:SS)</th>
              <th>Pace<br>(min/mile)</th>
              <th>Steps</th>
              <th>Location</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
          <% @dataset.each do |run| %>
            <tr>
              <td class="runs-date"><%= format_run_time(run.start_time) %></td>
              <td class="runs-distance"><%= format_distance(run.distance) %></td>
              <td class="runs-duration"><%= format_duration(run.duration) %></td>
              <td class="runs-pace"><%= format_pace(run.duration, run.distance) %></td>
              <td class="runs-steps"><%= run.steps %></td>
              <td class="runs-location"><%= run.location %></td>
              <td align="center"><%= link_to 'Details', run_path(run.id) %></td>
            </tr>
          <% end %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
var months = {1:'Jan', 2:'Feb', 3:'Mar', 4:'Apr', 5:'May', 6:'Jun', 7:'July', 8:'Aug', 9:'Sep', 10:'Oct', 11:'Nov', 12:'Dec'};

var dataset = <%= raw @monthly_breakdown.to_json %>;

// set the dimensions and margins of the graph
var margin = {top: 10, right: 40, bottom: 40, left: 50},
    width = 800 - margin.left - margin.right,
    height = 405 - margin.top - margin.bottom;

// append the svg object to the body of the page
// append a 'group' element to 'svg'
// moves the 'group' element to the top left margin
var svg = d3.select("#chart-monthly-breakdown")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var xScale, yScale, xAxis, line_2015, line_2016, legend, color, maxTotal;
var maxTotalsByMonth = [];

function renderGridlines() {
  return d3.axisLeft(yScale).ticks(maxTotal);
}

function initChart() {
  // set the ranges
  xScale = d3.scaleBand().range([0, width]).padding(1.0);
  yScale = d3.scaleLinear().range([height, 0]);
  color = d3.scaleOrdinal().range(["#8a89a6", "#d0743c"]);

  // get all unique years in dataset
  var years = d3.keys(dataset[0]).filter(function(key) { return key.startsWith('total_'); });

  // format the data
  dataset.forEach(function(d) {
    d.month = months[d.month];
    d.total_2015 = +d.total_2015;
    d.total_2016 = +d.total_2016;

    d.totals = years.map(function(name) { return {name: name, total: +d[name]}; });
    maxTotalsByMonth.push(Math.max(d[years[0]], d[years[1]]));
  });

  maxTotal = d3.max(maxTotalsByMonth);

  // define the line for 2015
  line_2015 = d3.line()
      .x(function(d) { return xScale(d.month); })
      .y(function(d) { return yScale(d.total_2015); });

  // define the line for 2016
  line_2016 = d3.line()
      .x(function(d) { return xScale(d.month); })
      .y(function(d) { return yScale(d.total_2016); });

  // scale the range of the data in the domains
  xScale.domain(dataset.map(function(d) { return d.month; }));
  yScale.domain(d3.extent(dataset, function(d) { return Math.max(d.total_2015, d.total_2016); }));

  // add the 2015 line
  svg.append("path")
      .datum(dataset)
      .attr("class", "line_2015")
      .attr("d", line_2015)
      .attr("fill", "none")
      .attr("stroke", function(d) { return color(d[0]); })
      .attr("stroke-width", function(d) { return 1.5; });

  // add the 2016 line
  svg.append("path")
      .datum(dataset)
      .attr("class", "line_2016")
      .attr("d", line_2016)
      .attr("fill", "none")
      .attr("stroke", function(d) { return color(d); })
      .attr("stroke-width", function(d) { return 1.5; });

  // add the x-axis
  xAxis = svg.append("g")
      .attr("class", "axis axis--x")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(xScale));

  // add the y-Axis
  svg.append("g")
      .call(d3.axisLeft(yScale).ticks(maxTotal))
    .append("text")
      .attr("class", "axis-title")
      .attr("transform", "rotate(-90)")
      .attr("y", -40)
      .attr("x", 0 - (height / 2))
      .attr("dy", ".71em")
      .style("text-anchor", "middle")
      .text("Monthly Total");

  // add the y-axis grid lines
  svg.append("g")
    .attr("class", "grid")
    .call(renderGridlines().tickSize(-width).tickFormat(""));

  // add the legend
  legend = svg.selectAll(".legend")
        .data(years.slice())
      .enter().append("g")
        .attr("class", "legend")
        .attr("transform", function(d, i) {
          return "translate(0," + i * 20 + ")";
        });

  legend.append("rect")
    .attr("x", width - 18)
    .attr("width", 18)
    .attr("height", 18)
    .style("fill", color);

  legend.append("text")
    .attr("x", width - 24)
    .attr("y", 10)
    .attr("dy", ".25em")
    .style("text-anchor", "end")
    .text(function(d) {
      return d.substr(d.length-4);
    });
}

function initEvents() {
  // set up event handler for resizes
  W.addListener(update);
}

function update() {
  updateScales();
  updateAxes();
  updateLines();
  updateLegend();
}

function updateScales() {
  var updatedWidth = getUpdatedWidth();
  xScale.rangeRound([0, updatedWidth]).padding(1.0);

  svg.selectAll(".grid")
    .transition().call(renderGridlines().tickSize(-updatedWidth).tickFormat(""));
}

function updateAxes() {
  xAxis.transition().call(d3.axisBottom(xScale));
}

function updateLines() {
  svg.select('.line_2015').datum(dataset).attr("d", line_2015);
  svg.select('.line_2016').datum(dataset).attr("d", line_2016);
}

function updateLegend() {
  var updatedWidth = getUpdatedWidth();
  svg.selectAll('.legend rect').transition().attr("x", updatedWidth - 18);
  svg.selectAll('.legend text').transition().attr("x", updatedWidth - 24);
}

function getUpdatedWidth() {
  var chartAreaWidth = (d3.select("#chart-monthly-breakdown").style("width").replace("px", "")) - (margin.left + margin.right);
  return d3.min([chartAreaWidth, width]);
}

initChart();
update();
initEvents();

</script>
